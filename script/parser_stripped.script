{{BEGIN_REPLACE}}

global values = ""
global op = ""
global result = ""
global service = ""
global quote = " "

def json_checkKeywordMatch(src="", target="", index=1):
  textmsg("check match in: ", src)
  textmsg("check for: ", target)
  textmsg("from position: ", index)

  src_length = str_len(src)
  tgt_length = str_len(target)
  if tgt_length == 0:
    textmsg("target empty!")
    return False
  end
  if src_length == 0:
    textmsg("src empty!")
    return False
  end
  if index <= 0:
    textmsg("index to low!", index)
    return False
  end
  if index + tgt_length + 1 > src_length:
    textmsg("index to high!", index)
    return False
  end

  if str_at(src,index-1) != quote:
    textmsg("keyword not headed by a quote!")
    return False
  end
  if str_at(src, index + tgt_length) != quote:
    textmsg("keyword not followed by a quote!")
    return False
  end
  if str_at(src, index + tgt_length + 1) != ":":
    textmsg("keyword not followed by a colcon!")
    return False
  end

  return True
end

def json_strFindFirstNotOf(src, target, start = 0):
  position = start
  while position < str_len(src):
    a = str_at(src, position)
    if str_find(target, a) == -1:
      return position
    end
    position = position + 1
  end
  return -1
end

def json_findCorrespondingClosingContainer(src, open_sign, closing_sign, start=1):
  position = start
  brace_count = 0
  while position < str_len(src):
    if str_at(src, position) == open_sign and str_at(src, position -1) != "\":
      brace_count = brace_count + 1
    end
    
    if str_at(src, position) == closing_sign and str_at(src, position -1) != "\":
      brace_count = brace_count - 1
      if brace_count == 0:
        textmsg("found closing container at ", position)
        return position
      end
    end
    
    position = position + 1
  end
  
  textmsg("no closing container found for opening at ", start)
  return -1
end

def json_findCorrespondingDelimiter(src, start = 0):
  length = str_len(src)
  if length <= 0 or start >= length:
    return -1
  end
  
  delimiter_start = str_at(src, start)
  delimiter_end = " "
  
  if delimiter_start == quote:
    delimiter_end = quote
  elif delimiter_start == "{":
    delimiter_end = "}"
  elif delimiter_start == "[":
    delimiter_end = "]"
  elif delimiter_start == "(":
    delimiter_end = ")"
  else:
    position = json_strFindFirstNotOf(src, "truefalsn", start +1)
    return position
  end
  
  return json_findCorrespondingClosingContainer(src, delimiter_start, delimiter_end, start +1)
end

def json_getElement(inp_string, name):
  inp_length = str_len(inp_string)
  name_length = str_len(name)
  textmsg("input_length = ", inp_length)
  textmsg("name_length = ", name_length)

  if inp_length <= 0:
    return [0, 0]
  end
  if name_length <= 0:
    return [0, 0]
  end

  local start_element = 0
  local end_element = 0
  local index = 0

  while index < inp_length:
    textmsg("startelement: ", index)
    index = str_find(inp_string, name, start_element)
    if json_checkKeywordMatch(inp_string, name, index) == True:
      start_element = index
      break
    end

    if index == -1:
      return [0, 0]
    end

    index = index + 1
  end

  textmsg("found element at: ", start_element)
  
  end_element = json_findCorrespondingDelimiter(inp_string, start_element)
  
  end_element = json_strFindFirstNotOf(inp_string, ": ", end_element)
  if end_element == -1:
    textmsg("did not sign after colcon")
    return [0, 0]
  end
  
  end_element = json_findCorrespondingDelimiter(inp_string, end_element)
    if end_element == -1:
    textmsg("did not find end of element")
    return [0, 0]
  end
  return [start_element, end_element]
end

def ri_getValues(inp_string):
  textmsg("get values from ", inp_string)
  local bounds = json_getElement(inp_string, "values")
  return str_sub(inp_string, bounds[0], bounds[1]-bounds[0])
end

def ri_parseServiceResponse(inp_msg=""):
  if str_empty(inp_msg) == True:
    textmsg("no string to parse!")
    return None
  end
  
  quote = str_at(inp_msg, 1)
  textmsg("quote is: ", quote)
  values = ri_getValues(inp_msg)
  textmsg("value = ", values)
end

socket_open("192.168.0.71", 9090, "rosbridge")

socket_send_byte(123, "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(111, "rosbridge") 
socket_send_byte(112, "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(58 , "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(99 , "rosbridge") 
socket_send_byte(97 , "rosbridge") 
socket_send_byte(108, "rosbridge") 
socket_send_byte(108, "rosbridge") 
socket_send_byte(95 , "rosbridge") 
socket_send_byte(115, "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(114, "rosbridge") 
socket_send_byte(118, "rosbridge") 
socket_send_byte(105, "rosbridge") 
socket_send_byte(99 , "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(44 , "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(115, "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(114, "rosbridge") 
socket_send_byte(118, "rosbridge") 
socket_send_byte(105, "rosbridge") 
socket_send_byte(99 , "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(58 , "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(47 , "rosbridge") 
socket_send_byte(115, "rosbridge") 
socket_send_byte(105, "rosbridge") 
socket_send_byte(109, "rosbridge") 
socket_send_byte(112, "rosbridge") 
socket_send_byte(108, "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(83 , "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(114, "rosbridge") 
socket_send_byte(118, "rosbridge") 
socket_send_byte(105, "rosbridge") 
socket_send_byte(99 , "rosbridge") 
socket_send_byte(101, "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(44 , "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(97 , "rosbridge") 
socket_send_byte(114, "rosbridge") 
socket_send_byte(103, "rosbridge") 
socket_send_byte(115, "rosbridge") 
socket_send_byte(34 , "rosbridge") 
socket_send_byte(58 , "rosbridge") 
socket_send_byte(123, "rosbridge") 
socket_send_byte(125, "rosbridge") 
socket_send_byte(125, "rosbridge") 
socket_send_byte(10 , "rosbridge")

sleep(0.1)
string_from_server = socket_read_string("rosbridge")
ri_parseServiceResponse(string_from_server)
socket_close("rosbridge")
